@using Opinity.Survey.Services
@using Opinity.Survey.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json.Linq;
@using System.Net.Http.Headers;
@using System.Net.Http.Json;

@namespace Opinity.Survey
@inherits ModuleBase
@inject ISurveyService SurveyService
@inject ISurveyAnswersService SurveyAnswersService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

@if (SelectedSurvey != null)
{
    <ActionLink Action="Edit" Security="SecurityAccessLevel.Edit"
                Text="Edit Survey" />
    <br />
    <br />
}
else
{
    <ActionLink Action="Edit" Security="SecurityAccessLevel.Edit"
                Text="Create Survey" />
    <br />
    <br />
}

@if (radzenInitialized)
{
    @if (SelectedSurvey != null)
    {
        <div class="row">
            <div class="col-md-12">
                <h5><b>@SelectedSurvey.SurveyName</b></h5>
            </div>
        </div>
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Survey">
                    @if (ShowSurveyComplete)
                    {
                        <b>Responses Saved - Survey Complete</b>
                    }
                    else
                    {
                        <RadzenTemplateForm TItem="Survey" Data="@SelectedSurvey" Submit="@SaveSurvey">
                            <div>
                                @foreach (var SurveyItem in SelectedSurvey.SurveyItem.OrderBy(x => x.Position))
                                {
                                    <div class="row">
                                        <div class="col-md-9" style="text-align: left;margin-bottom: 20px">
                                            <b>@SurveyItem.ItemLabel</b>
                                            <br />
                                            @if (SurveyItem.ItemType == "Text Box")
                                            {
                                                <RadzenTextBox MaxLength="4000" Name="@SurveyItem.Id.ToString()"
                                                @bind-Value="@SurveyItem.AnswerValueString" />
                                            }
                                            @if (SurveyItem.ItemType == "Text Area")
                                            {
                                                <RadzenTextArea MaxLength="4000" Name="@SurveyItem.Id.ToString()"
                                                @bind-Value="@SurveyItem.AnswerValueString" />
                                            }
                                            @if (SurveyItem.ItemType == "Date")
                                            {
                                                <RadzenDatePicker DateFormat="d" Name="@SurveyItem.Id.ToString()"
                                                @bind-Value="@SurveyItem.AnswerValueDateTime"
                                                                  TValue="DateTime?" ShowTime="false" />
                                            }
                                            @if (SurveyItem.ItemType == "Date Time")
                                            {
                                                <RadzenDatePicker TValue="DateTime?" Name="@SurveyItem.Id.ToString()"
                                                @bind-Value="@SurveyItem.AnswerValueDateTime"
                                                                  ShowTime="true" />
                                            }
                                            @if (SurveyItem.ItemType == "Dropdown")
                                            {
                                                <RadzenDropDown AllowClear="true" TValue="string" Name="@SurveyItem.Id.ToString()"
                                                                Data="@SurveyItem.SurveyItemOption.OrderBy(x => x.Id)"
                                                                TextProperty="OptionLabel" ValueProperty="OptionLabel"
                                                @bind-Value="@SurveyItem.AnswerValueString"
                                                                Style="width:300px;" />
                                            }
                                            @if (SurveyItem.ItemType == "Multi-Select Dropdown")
                                            {
                                                <RadzenDropDown Name="@SurveyItem.Id.ToString()"
                                                                TValue="IEnumerable<string>"
                                                                Multiple="true"
                                                                AllowClear="true"
                                                                AllowFiltering="true"
                                                @bind-Value="SurveyItem.AnswerValueList"
                                                                Placeholder="Select..."
                                                                Data="@SurveyItem.SurveyItemOption"
                                                                TextProperty="OptionLabel"
                                                                ValueProperty="OptionLabel"
                                                                Style="width:300px;" />
                                            }
                                            @if (SurveyItem.Required == 1)
                                            {
                                                <br />

                                                <RadzenRequiredValidator Component="@SurveyItem.Id.ToString()"
                                                                               Text="Required" Popup="false"
                                                                               Style="position: absolute" />
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="row">
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit"></RadzenButton>
                            </div>
                        </RadzenTemplateForm>
                    }
                    @if (SelectedSurvey.SurveyItem.Count == 0)
                    {
                        <h4>No Survey Items</h4>
                    }
                </RadzenTabsItem>

                <RadzenTabsItem Text="Response graph">
                    <RadzenPanel AllowCollapse="false" Style="margin-bottom: 10px">
                        <ChildContent>
                            <RadzenDataList Count="@SurveyResultsCount"
                                            Data="@SurveyResults"
                                            LoadData="@LoadSurveyResultsData"
                                            PageSize="1" WrapItems="true" AllowPaging="true"
                                            TItem="SurveyItem">
                                <Template Context="item">
                                    <RadzenCard Style="height:300px">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <RadzenChart>
                                                    <RadzenDonutSeries Data="@item.AnswerResponses"
                                                                       CategoryProperty="OptionLabel"
                                                                       ValueProperty="Responses">
                                                        <TitleTemplate>
                                                            <div class="rz-donut-content">
                                                                <div>@item.ItemLabel</div>
                                                            </div>
                                                        </TitleTemplate>
                                                    </RadzenDonutSeries>
                                                </RadzenChart>
                                            </div>
                                        </div>
                                    </RadzenCard>
                                </Template>
                            </RadzenDataList>
                        </ChildContent>
                    </RadzenPanel>
                </RadzenTabsItem>


                <RadzenTabsItem Text="Response list">
                    <RadzenPanel AllowCollapse="false" Style="margin-bottom: 10px">
                        <RadzenDataGrid AllowFiltering="true" 
                            AllowColumnResize="true" 
                            AllowAlternatingRows="false" 
                            FilterMode="FilterMode.Advanced" 
                            AllowSorting="true" 
                            PageSize="5" 
                            AllowPaging="true" 
                            PagerHorizontalAlign="HorizontalAlign.Left" 
                            ShowPagingSummary="true"
                                        Count="@SurveyResultsCount"
                                        LoadData="@LoadSurveyResultsData"
                                        Data="@SurveyResults"
                                        TItem="SurveyItem" 
                            ColumnWidth="300px" 
                            LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                    <RadzenDataGridColumn TItem="SurveyItem" Property="AnswerResponses" Filterable="false" Title="AnswerResponses" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="SurveyItem" Property="ItemLabel" Title="ItemLabel" Frozen="true" Width="160px" />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenPanel>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>




    }
}
@code {
    bool radzenInitialized = false;
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Anonymous;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/Radzen.Blazor/css/material-base.css" },
        new Resource { ResourceType = ResourceType.Script, Url = "_content/Radzen.Blazor/Radzen.Blazor.js" }
    };

    bool isAuthenticated = false;
    bool ShowSurveyComplete = false;
    Survey SelectedSurvey;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender); // allows Oqtane to register the JavaScript library declared in Resources

        if (firstRender && !radzenInitialized)
        {
            radzenInitialized = true;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // get user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
            }

            SelectedSurvey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Survey {Error}", ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    System.Uri uri = new System.Uri("https://surveylistopinity.atlassian.net/");
    public string userName = "supersunnywan@gmail.com";
    public string apiKey = "ATATT3xFfGF0l_laFrNy_SegjxUITnT4HlDxF-yaRppjC5EEF355ywlNW0NNbTOxwOEkk0o5nybWYDOLCSum0JhVDfpSvlMNtRZ8BeQ0kLBvazsUpd6ZUWmOorHbM5LmA4Vmu6D0Dh9OvEosMErsXUVRuzIHCueyHTanttTeYsceoWrYizWkf4c=08DECC5C";
    public string projectKey = "SR";

    async Task SaveSurvey()
    {
        try
        {
            if (!isAuthenticated)
            {
                // Try to get the Anonymous Cookie
                var cookieName = $"Oqtane-Survey-Instance-{ModuleState.ModuleId}";
                var interop = new Oqtane.UI.Interop(JsRuntime);

                var AnonymousCookie = await interop.GetCookie(cookieName);

                if ((AnonymousCookie is null) || (AnonymousCookie == ""))
                {
                    // Create a GUID for the user
                    AnonymousCookie = Guid.NewGuid().ToString();

                    await interop.SetCookie(cookieName, AnonymousCookie, 360);
                }

                SelectedSurvey.AnonymousCookie = AnonymousCookie;
                SelectedSurvey.UserId = null;
            }

            await SurveyAnswersService.CreateSurveyAnswersAsync(SelectedSurvey);

            CompleteSurvey();

            var result = await CreateTaskTicket(
            uri, userName, apiKey, projectKey,
            @SelectedSurvey.SurveyName,
            "This is a ticket created from C# code!");
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error in SaveSurvey {Error}", ex.Message);
            AddModuleMessage("Error in SaveSurvey", MessageType.Error);
        }

    }

    void CompleteSurvey()
    {
        ShowSurveyComplete = true;

        // Clear Answers
        foreach (var item in SelectedSurvey.SurveyItem)
        {
            item.AnswerValueString = null;
            item.AnswerValueDateTime = null;
            item.AnswerValueList = null;
        }
    }

    // Survey Results

    int SurveyResultsCount;
    IEnumerable<SurveyItem> SurveyResults;

    async Task LoadSurveyResultsData(LoadDataArgs args)
    {

        SurveyResults = await SurveyAnswersService.SurveyResultsDataAsync(ModuleState.ModuleId, SelectedSurvey.SurveyId, args);

        SurveyResultsCount = SelectedSurvey.SurveyItem
            .Where(x => x.ItemType != "Text Area")
            .Count();

        await InvokeAsync(StateHasChanged);
    }

    public static async Task<JiraTicketResponse> CreateTaskTicket(Uri jiraUri, string userName, string apiKey, string projectKey, string summary, string description)
    {
        var authData = System.Text.Encoding.UTF8.GetBytes($"{userName}:{apiKey}");
        var basicAuthentication = Convert.ToBase64String(authData);

        HttpClient client = new HttpClient();

        client.BaseAddress = jiraUri;
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", basicAuthentication);
        var StringContent = new
        {
            fields = new
            {
                issuetype = new { name = "Task" },
                summary = summary,
                project = new { key = projectKey },
                description = new
                {
                    version = 1,
                    type = "doc",
                    content = new[] {
                        new {
                            type = "paragraph",
                            content = new []{
                                new {
                                    type = "text",
                                    text =  description
                                }
                            }
                        }
            }
                }
            }
        };

        var result = await client.PostAsJsonAsync("/rest/api/3/issue", StringContent);
        if (result.StatusCode == System.Net.HttpStatusCode.Created)
            return await result.Content.ReadFromJsonAsync<JiraTicketResponse>();
        else
            throw new Exception(await result.Content.ReadAsStringAsync());
    }
    public class JiraTicketResponse
    {
        public int Id { get; set; }
        public string Key { get; set; }
        public Uri Self { get; set; }
    }
}

}